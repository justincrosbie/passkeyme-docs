{"archive":{"blogPosts":[{"id":"introducing-passkeyme-dev-community","metadata":{"permalink":"/blog/introducing-passkeyme-dev-community","source":"@site/blog/2025-08-17-introducing-passkeyme-dev-community.md","title":"Introducing Passkeyme to the Dev Community - The Easiest Way to Add Passkeys and OAuth","description":"After building apps with various authentication solutions, I kept running into the same challenge: authentication setup takes way longer than it should.","date":"2025-08-17T00:00:00.000Z","tags":[{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"},{"inline":true,"label":"dev-community","permalink":"/blog/tags/dev-community"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"passkeys","permalink":"/blog/tags/passkeys"},{"inline":true,"label":"oauth","permalink":"/blog/tags/oauth"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"developer-experience","permalink":"/blog/tags/developer-experience"}],"readingTime":3.52,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"introducing-passkeyme-dev-community","title":"Introducing Passkeyme to the Dev Community - The Easiest Way to Add Passkeys and OAuth","tags":["announcement","dev-community","authentication","passkeys","oauth","react","developer-experience"]},"unlisted":false,"nextItem":{"title":"Introducing PasskeyMe's New JavaScript and React SDKs - Firebase Auth for the Passkey Era","permalink":"/blog/new-javascript-react-sdks"}},"content":"After building apps with various authentication solutions, I kept running into the same challenge: **authentication setup takes way longer than it should**.\n\nThat's why I built [Passkeyme](https://passkeyme.com) — a **free** authentication platform focused on simplicity and developer experience.\n\n<!-- truncate -->\n\n## Why I Built This\n\nWhile there are great authentication solutions out there like Firebase Auth, Auth0, and Supabase, I wanted something that:\n\n- **Gets you started in minutes** instead of hours\n- **Includes passkeys out of the box** without complex WebAuthn setup\n- **Offers hosted auth pages** so you don't have to build UI\n- **Stays free** for most use cases\n- **Works with any framework** but has great React integration\n\nPasskeys are becoming increasingly important for security, but implementing WebAuthn correctly is still quite complex.\n\n## Introducing Passkeyme\n\nPasskeyme is the authentication platform designed for developers who want to ship fast without sacrificing security. Here's what makes it different:\n\n### ⚡ **Drop-in Components**\n```jsx\nimport { PasskeymeAuthPanel } from '@passkeyme/react-auth';\n\nfunction App() {\n  return (\n    <PasskeymeAuthPanel\n      appId=\"your-app-id\"\n      onSuccess={(user) => console.log('Logged in:', user)}\n      providers={['google', 'github', 'apple']}\n      enablePasskeys={true}\n    />\n  );\n}\n```\n\nThat's it. Seriously. Full authentication with passkeys, OAuth, and traditional login in **3 lines of code**.\n\n### 🎯 **Hook-Based API**\nPrefer hooks? We've got you covered:\n\n```jsx\nimport { usePasskeymeAuth } from '@passkeyme/react-auth';\n\nfunction LoginButton() {\n  const { login, user, isLoading } = usePasskeymeAuth({\n    appId: 'your-app-id'\n  });\n\n  return (\n    <button onClick={() => login('passkey')}>\n      {isLoading ? 'Signing in...' : 'Sign in with Passkey'}\n    </button>\n  );\n}\n```\n\n### 🌐 **Hosted Auth Pages**\nDon't want to build UI? Use our hosted authentication pages:\n\n```javascript\n// Redirect to hosted auth\nwindow.location.href = 'https://auth.passkeyme.com/your-app-id';\n\n// Or use the programmatic API\nimport { triggerPasskeymeAuth } from '@passkeyme/react-auth';\n\ntriggerPasskeymeAuth({\n  appId: 'your-app-id',\n  redirectUri: 'https://yourapp.com/callback'\n});\n```\n\n## What Makes Passkeyme Different\n\nPasskeyme is designed around a few core principles: **simplicity**, **speed**, and **cost-effectiveness**.\n\n### 🔑 **Passkeys Made Simple**\nWebAuthn implementation can be tricky with browser compatibility and UX considerations. Passkeyme handles the complexity so you can focus on your app.\n\n### 🔗 **Multiple OAuth Providers**\nSupport for Google, GitHub, Apple, Microsoft, Facebook — all with the same simple API. No need to manage different OAuth configurations.\n\n### 🎨 **Flexible Integration**\n- **Inline components** for custom UIs\n- **Hosted pages** for rapid deployment  \n- **Programmatic API** for advanced use cases\n- **Full customization** of branding and flow\n\n### 🚀 **Developer Experience**\n- **TypeScript-first** with full type safety\n- **Zero configuration** to get started\n- **Comprehensive docs** with live examples\n- **Free tier** that covers most use cases\n\n## Real-World Example\n\nHere's a complete authentication flow with multiple providers:\n\n```jsx\nimport { PasskeymeAuthPanel } from '@passkeyme/react-auth';\n\nfunction AuthDemo() {\n  const handleAuthSuccess = (user) => {\n    console.log('Welcome!', user);\n    // User is automatically signed in\n    // JWT token available in user.token\n  };\n\n  return (\n    <PasskeymeAuthPanel\n      appId=\"demo-app-123\"\n      onSuccess={handleAuthSuccess}\n      providers={['google', 'github', 'apple', 'microsoft']}\n      enablePasskeys={true}\n      enableUsernamePassword={true}\n      style={{\n        primaryColor: '#4F46E5',\n        borderRadius: '8px'\n      }}\n    />\n  );\n}\n```\n\nThis gives you a complete authentication experience with:\n- ✅ Passkey registration and login\n- ✅ OAuth with 5 major providers  \n- ✅ Traditional email/password\n- ✅ Custom styling\n- ✅ Automatic token management\n\n## How It Compares\n\nHere's how Passkeyme stacks up for common use cases:\n\n| Feature | Traditional Setup | Passkeyme |\n|---------|-------------------|-----------|\n| **Setup Time** | Hours of configuration | Minutes |\n| **Passkey Support** | Manual WebAuthn implementation | Built-in |\n| **OAuth Providers** | Configure each separately | Unified API |\n| **Hosted Pages** | Build your own | Included |\n| **Cost** | Varies by usage | Free tier available |\n| **Maintenance** | Ongoing security updates | Handled for you |\n\n## Getting Started\n\nReady to try Passkeyme? Here's how to add authentication to your app in under 5 minutes:\n\n1. **Install the SDK**\n```bash\nnpm install @passkeyme/react-auth\n```\n\n2. **Get your App ID**\n```bash\n# Sign up at https://passkeyme.com\n# Create an app and copy your App ID\n```\n\n3. **Add authentication**\n```jsx\nimport { PasskeymeAuthPanel } from '@passkeyme/react-auth';\n\n<PasskeymeAuthPanel appId=\"your-app-id\" />\n```\n\nThat's it! Your app now has production-ready authentication with passkeys and OAuth.\n\n## What's Next?\n\nI'm actively working on expanding Passkeyme with:\n\n- 🔜 **React Native SDK** for mobile apps\n- 🔜 **Vue and Svelte SDKs** for other frameworks  \n- 🔜 **Enhanced user management** features\n- 🔜 **Enterprise features** for larger teams\n\nThe goal is to keep the core experience simple while adding more options for teams that need them.\n\n## Try It Yourself\n\n- 🚀 **Live Demo**: [demo.passkeyme.com](https://demo.passkeyme.com)\n- 📚 **Documentation**: [docs.passkeyme.com](https://docs.passkeyme.com)\n- 💻 **GitHub**: [github.com/justincrosbie/passkeyme](https://github.com/justincrosbie/passkeyme)\n\n---\n\n*This post was originally shared with the Dev.to community as part of our effort to make authentication simpler for all developers. Follow our journey as we continue to build developer-first authentication tools.*"},{"id":"new-javascript-react-sdks","metadata":{"permalink":"/blog/new-javascript-react-sdks","source":"@site/blog/2025-06-15-new-javascript-react-sdks.md","title":"Introducing PasskeyMe's New JavaScript and React SDKs - Firebase Auth for the Passkey Era","description":"We're excited to announce the launch of PasskeyMe's completely redesigned JavaScript and React SDKs! These new SDKs bring a Firebase Auth-like developer experience to passkey authentication using hosted authentication pages, making it easier than ever to integrate secure, passwordless authentication into your web applications.","date":"2025-06-15T00:00:00.000Z","tags":[{"inline":true,"label":"sdk","permalink":"/blog/tags/sdk"},{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"typescript","permalink":"/blog/tags/typescript"},{"inline":true,"label":"firebase-auth","permalink":"/blog/tags/firebase-auth"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"},{"inline":true,"label":"developer-experience","permalink":"/blog/tags/developer-experience"}],"readingTime":7.79,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"new-javascript-react-sdks","title":"Introducing PasskeyMe's New JavaScript and React SDKs - Firebase Auth for the Passkey Era","tags":["sdk","javascript","react","typescript","firebase-auth","announcement","developer-experience"]},"unlisted":false,"prevItem":{"title":"Introducing Passkeyme to the Dev Community - The Easiest Way to Add Passkeys and OAuth","permalink":"/blog/introducing-passkeyme-dev-community"},"nextItem":{"title":"Passkeyme supports Discoverable Credentials!!","permalink":"/blog/discoverable"}},"content":"We're excited to announce the launch of PasskeyMe's completely redesigned JavaScript and React SDKs! These new SDKs bring a **Firebase Auth-like developer experience** to passkey authentication using **hosted authentication pages**, making it easier than ever to integrate secure, passwordless authentication into your web applications.\n\n## 🆕 What's New?\n\n### **@passkeyme/auth** - Core JavaScript/TypeScript SDK\nOur new core SDK provides a complete authentication solution using PasskeyMe's hosted authentication pages:\n\n```typescript\nimport { PasskeymeAuth } from '@passkeyme/auth';\n\nconst auth = new PasskeymeAuth({\n  appId: 'your-app-id',\n  baseUrl: 'https://auth.passkeyme.com',\n  mode: 'hosted' // Uses your branded hosted auth pages\n});\n\n// Redirect to hosted auth page (all methods)\nauth.redirectToLogin();\n\n// Redirect to specific OAuth provider\nauth.redirectToOAuth('google');\n\n// Handle return from hosted auth\nconst user = await auth.handleAuthCallback();\n```\n\n### **@passkeyme/react-auth** - React Integration SDK\nThe React SDK brings hosted authentication directly into your React components with simple hooks:\n\n```tsx\nimport { \n  PasskeymeProvider, \n  usePasskeyme\n} from '@passkeyme/react-auth';\n\nfunction App() {\n  return (\n    <PasskeymeProvider config={{ appId: 'your-app-id' }}>\n      <AuthenticatedApp />\n    </PasskeymeProvider>\n  );\n}\n\nfunction LoginPage() {\n  const { redirectToLogin, redirectToOAuth } = usePasskeyme();\n  \n  return (\n    <div>\n      <button onClick={() => redirectToLogin()}>\n        🔐 Sign In (All Methods)\n      </button>\n      <button onClick={() => redirectToOAuth('google')}>\n        🌐 Continue with Google\n      </button>\n    </div>\n  );\n}\n```\n\n## 🎯 Why Hosted Authentication?\n\n### **The Firebase Auth Experience, But Better**\n\nWhile Firebase Auth has set the gold standard for authentication SDKs, it requires complex setup for OAuth providers and lacks comprehensive passkey support. We created something that's **even simpler** while being more powerful.\n\n### **Our Solution: Hosted Pages + Self-Hosted Control**\n\nPasskeyMe's hosted authentication approach combines the best of all worlds:\n\n- ✅ **Zero Configuration**: No OAuth app setup, no complex SDK configuration\n- ✅ **Centralized Branding**: Your logo, colors, and styling across all apps\n- ✅ **Passkey-First**: Native WebAuthn/passkey support built from the ground up  \n- ✅ **Self-Hosted**: Full control over your authentication infrastructure\n- ✅ **TypeScript-First**: Complete type safety and excellent developer experience\n- ✅ **Framework Agnostic**: Works with React, Vue, Angular, Next.js, or vanilla JavaScript\n\n## 🚀 Key Features\n\n### **🎨 Hosted Authentication Pages**\nYour users see beautifully designed, branded authentication pages:\n\n```typescript\n// Your app redirects to hosted auth page\nauth.redirectToLogin();\n\n// Users see YOUR branded page with:\n// - Your logo and colors\n// - Configured OAuth providers (Google, GitHub, etc.)\n// - Passkey authentication\n// - Username/password forms\n// - Custom styling and messaging\n```\n\n### **🔐 Comprehensive Authentication Methods**\nAll methods available on your hosted pages:\n\n```typescript\n// Direct to general auth page (shows all enabled methods)\nauth.redirectToLogin();\n\n// Direct to specific OAuth provider\nauth.redirectToOAuth('google');\nauth.redirectToOAuth('github');\n\n// Direct to specific auth method\nauth.redirectToLogin({ authMethod: 'passkey' });\nauth.redirectToLogin({ authMethod: 'password' });\n```\n\n### **Modern React Integration**\n```tsx\n// Authentication state management\nconst { user, isAuthenticated, loading, error } = usePasskeyme();\n\n// Pre-built UI components\n<PasskeymeButton>🔐 Login with Passkey</PasskeymeButton>\n<PasskeymeOAuthButton provider=\"google\">Login with Google</PasskeymeOAuthButton>\n<PasskeymeUserProfile editable={true} />\n<PasskeymeProtectedRoute><Dashboard /></PasskeymeProtectedRoute>\n```\n\n### **Automatic Token Management**\n- Secure token storage in browser\n- Automatic token refresh\n- HTTP interceptors for API calls\n- CSRF protection and security best practices\n\n### **Production-Ready Features**\n- Comprehensive error handling\n- Loading states and user feedback\n- Customizable UI components\n- Mobile-responsive design\n- Accessibility (WCAG) compliance\n\n## 🔄 Easy Migration\n\n### **From Firebase Auth**\n\n### **⚡ Automatic Token Management**\nNo more manually handling JWTs:\n\n```typescript\n// Tokens stored securely and refreshed automatically\nconst token = await auth.getAccessToken();\n\n// Use with any HTTP client\nfetch('/api/protected', {\n  headers: { 'Authorization': `Bearer ${token}` }\n});\n```\n\n### **🛡️ Protected Routes Made Simple**\n\n```tsx\n// React Router protection\n<Route path=\"/dashboard\" element={\n  <ProtectedRoute>\n    <Dashboard />\n  </ProtectedRoute>\n} />\n\n// Next.js protection\nfunction ProtectedPage() {\n  const { isAuthenticated, loading } = usePasskeyme();\n  \n  if (loading) return <Spinner />;\n  if (!isAuthenticated) return <Navigate to=\"/login\" />;\n  \n  return <Dashboard />;\n}\n```\n\n## 🔄 Seamless Migration\n\n### **From Firebase Auth**\n\nThe API is intentionally similar for easy migration:\n\n```typescript\n// Firebase Auth (old)\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nawait signInWithEmailAndPassword(auth, email, password);\n\n// PasskeyMe (new)\nimport { PasskeymeAuth } from '@passkeyme/auth';\nconst auth = new PasskeymeAuth(config);\nauth.redirectToLogin({ authMethod: 'password' });\n```\n\n### **From Auth0**\n\n```tsx\n// Auth0 (old)\nconst { user, isAuthenticated, loginWithRedirect } = useAuth0();\n\n// PasskeyMe (new)  \nconst { user, isAuthenticated, redirectToLogin } = usePasskeyme();\n```\n\nThe transition is seamless, but you gain hosted auth pages, native passkey support, and eliminate vendor lock-in!\n\n## 🎨 Hosted Auth Page Customization\n\nYour hosted authentication pages are fully customizable through the PasskeyMe dashboard:\n\n### **🎯 Brand Your Experience**\n- Upload your logo and set brand colors\n- Customize fonts and styling  \n- Add custom messaging and copy\n- Set your own custom domain\n\n### **⚙️ Configure Auth Methods**\n- Enable/disable passkeys, OAuth providers, username/password\n- Set up OAuth apps (Google, GitHub, Facebook, etc.)\n- Configure passkey settings and policies\n- Set password requirements\n\n### **📱 Mobile-Optimized Design**\n- Responsive design works perfectly on all devices\n- Native mobile app integration via deep links\n- Progressive Web App (PWA) support\n\n## 🛡️ Security & Performance\n\n### **🔒 Enterprise-Grade Security**\n- OAuth secrets managed server-side (never exposed to client)\n- Automatic security headers and CSRF protection\n- SOC 2 Type II compliant infrastructure\n- Regular security audits and penetration testing\n\n### **⚡ Lightning-Fast Performance**\n- CDN-hosted assets for global speed\n- Minimal bundle size (< 50KB gzipped)\n- Optimized for Core Web Vitals\n- Automatic code splitting and lazy loading\n\n### **Built-in Security**\n- Automatic CSRF protection\n- Secure token storage with encryption\n- XSS protection for token handling\n- Secure HTTP-only cookie support\n- Token expiration and refresh management\n\n### **Performance Optimized**\n- Tree-shakable modules for minimal bundle size\n- Lazy loading of authentication components\n- Optimized re-rendering with React hooks\n- Efficient token caching and management\n\n## 📱 Real-World Example\n\nHere's a complete authentication flow in just a few lines:\n\n```tsx\nimport React from 'react';\nimport { \n  PasskeymeProvider, \n  usePasskeyme, \n  PasskeymeButton,\n  PasskeymeOAuthButton,\n  PasskeymeUserProfile \n} from '@passkeyme/react-auth';\n\nconst authConfig = {\n  apiUrl: process.env.REACT_APP_PASSKEYME_API_URL,\n  clientId: process.env.REACT_APP_PASSKEYME_CLIENT_ID,\n};\n\nfunction App() {\n  return (\n    <PasskeymeProvider config={authConfig}>\n      <AuthFlow />\n    </PasskeymeProvider>\n  );\n}\n\nfunction AuthFlow() {\n  const { user, isAuthenticated, loading } = usePasskeyme();\n\n  if (loading) return <div>Loading...</div>;\n\n  if (isAuthenticated) {\n    return (\n      <div>\n        <h1>Welcome back!</h1>\n        <UserProfile />\n      </div>\n    );\n## 📝 Complete React Example\n\nHere's how simple it is to add authentication to your React app:\n\n```tsx\nimport { PasskeymeProvider, usePasskeyme } from '@passkeyme/react-auth';\n\nconst authConfig = {\n  appId: 'your-app-id',\n  baseUrl: 'https://auth.passkeyme.com',\n  mode: 'hosted'\n};\n\nfunction App() {\n  return (\n    <PasskeymeProvider config={authConfig}>\n      <AuthenticatedApp />\n    </PasskeymeProvider>\n  );\n}\n\nfunction AuthenticatedApp() {\n  const { isAuthenticated, redirectToLogin } = usePasskeyme();\n\n  if (!isAuthenticated) {\n    return (\n      <div>\n        <h1>Welcome to My App</h1>\n        <button onClick={() => redirectToLogin()}>\n          🔐 Sign In\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h1>You're logged in!</h1>\n      <Dashboard />\n    </div>\n  );\n}\n```\n\nThat's it! Your users will see your beautifully branded hosted authentication page with all configured auth methods.\n\n## 🚀 Getting Started\n\n### **Installation**\n\n```bash\n# Core SDK (works with any framework)\nnpm install @passkeyme/auth\n\n# React SDK (includes core SDK)\nnpm install @passkeyme/react-auth @passkeyme/auth\n```\n\n### **Quick Setup**\n\n1. **Configure your provider:**\n```tsx\nimport { PasskeymeProvider } from '@passkeyme/react-auth';\n\n<PasskeymeProvider config={{\n  appId: 'your-app-id', // From PasskeyMe dashboard\n  mode: 'hosted' // Uses hosted auth pages\n}}>\n  <App />\n</PasskeymeProvider>\n```\n\n2. **Use the hook:**\n```tsx\nconst { user, redirectToLogin, isAuthenticated } = usePasskeyme();\n```\n\n3. **Add login buttons:**\n```tsx\n<button onClick={() => redirectToLogin()}>Sign In</button>\n```\n\n### **5-Minute Setup Guide**\n\n1. **Create a PasskeyMe account** at [passkeyme.com](https://passkeyme.com)\n2. **Set up your app** in the dashboard (configure branding, OAuth providers)\n3. **Install the SDK** and add the provider to your React app\n4. **Add login buttons** that redirect to hosted auth pages\n5. **Handle the callback** when users return from authentication\n\n## 🎯 Why Choose PasskeyMe?\n\n### **vs. Firebase Auth**\n- ✅ **Native passkey support** (Firebase requires custom implementation)\n- ✅ **Self-hosted** (no vendor lock-in)  \n- ✅ **Hosted auth pages** (easier setup, better UX)\n- ✅ **More OAuth providers** with simpler configuration\n\n### **vs. Auth0**\n- ✅ **More affordable** (especially for growing teams)\n- ✅ **Passkey-first** design (Auth0 added passkeys as an afterthought)\n- ✅ **Self-hosted option** (complete data control)\n- ✅ **Better developer experience** (simpler APIs)\n\n### **vs. Clerk**\n- ✅ **Self-hosted infrastructure** (vs. SaaS-only)\n- ✅ **More comprehensive passkey support**\n- ✅ **Framework agnostic** (works with any JavaScript framework)\n- ✅ **Enterprise-ready** (SOC 2, GDPR compliant)\n\n## 🔮 What's Next?\n\nWe're just getting started! Coming soon:\n\n- **🔄 Direct Authentication Mode**: For developers who want custom UI components without hosted pages\n- **📱 React Native SDK**: Native mobile authentication with passkeys and biometrics\n- **🌐 Vue.js & Angular SDKs**: First-class support for all major frameworks\n- **🔌 Webhook System**: Real-time auth events for your backend systems\n- **📊 Advanced Analytics**: User authentication insights and security monitoring\n\n## 🎉 Join the Passkey Revolution\n\n**The future of web authentication is here, and it's passwordless.** \n\nWith PasskeyMe's new SDKs, you can give your users the security and convenience of passkeys while maintaining the familiar, reliable developer experience you expect from modern authentication libraries.\n\n### **Ready to get started?**\n\n- 📚 **[Read the Documentation](/docs/SDKs/sdk-intro)**\n- 🚀 **[Try the Live Demo](https://demo.passkeyme.com)**\n- 💬 **[Join our Developer Community](https://discord.gg/passkeyme)**\n- 🔗 **[GitHub Repository](https://github.com/passkeyme/sdks)**\n\n**The passwordless future starts today. Let's build it together!** 🚀\n\n## 🔮 What's Next?\n\nThese new SDKs are just the beginning! Here's what's coming next:\n\n- **@passkeyme/vue-auth** - Vue.js integration\n- **@passkeyme/react-native-auth** - React Native mobile apps  \n- **@passkeyme/node-auth** - Server-side Node.js integration\n- **@passkeyme/flutter-auth** - Flutter mobile apps\n- **Advanced UI components** - Forms, modals, onboarding flows\n- **Theme system** - Pre-built design systems and themes\n\n## 📚 Resources\n\n- **[Documentation](https://docs.passkeyme.com/docs/SDKs/sdk-intro)** - Complete integration guides\n- **[JavaScript SDK Guide](https://docs.passkeyme.com/docs/SDKs/javascript-sdk)** - Core SDK documentation\n- **[React SDK Guide](https://docs.passkeyme.com/docs/SDKs/react-sdk)** - React-specific documentation\n- **[GitHub Examples](https://github.com/passkeyme/examples)** - Complete example applications\n- **[Live Demo](https://demo.passkeyme.com)** - Try the SDKs in action\n\n## 🤝 Community & Support\n\nWe're building PasskeyMe to be the authentication solution that developers actually want to use. Your feedback is crucial:\n\n- 🐛 **Found a bug?** [Report it on GitHub](https://github.com/passkeyme/issues)\n- 💡 **Have a feature request?** [Let us know!](https://github.com/passkeyme/discussions)\n- 🤝 **Need help integrating?** [Join our community](https://discord.gg/passkeyme)\n- 📧 **Enterprise support?** [Contact us directly](mailto:support@passkeyme.com)\n\n## 🎉 Try It Today!\n\nThe new PasskeyMe JavaScript and React SDKs are available now. Whether you're building a new application or looking to upgrade your existing authentication system, we've made it easier than ever to add secure, modern authentication to your web applications.\n\n**Get started today and give your users the passwordless authentication experience they deserve!**\n\n```bash\nnpm install @passkeyme/react-auth @passkeyme/auth\n```\n\nHappy coding! 🚀\n\n---\n\n*PasskeyMe - Secure authentication for the modern web*"},{"id":"discoverable","metadata":{"permalink":"/blog/discoverable","source":"@site/blog/2024-06-19-discoverable.md","title":"Passkeyme supports Discoverable Credentials!!","description":"Passkeyme now supports Discoverable Credentials! This new feature takes user authentication to the next level, providing a more seamless and secure experience for your users. 🚀","date":"2024-06-19T00:00:00.000Z","tags":[{"inline":true,"label":"introduction","permalink":"/blog/tags/introduction"},{"inline":true,"label":"passkeyme","permalink":"/blog/tags/passkeyme"},{"inline":true,"label":"saas","permalink":"/blog/tags/saas"},{"inline":true,"label":"resident key","permalink":"/blog/tags/resident-key"},{"inline":true,"label":"synchronised","permalink":"/blog/tags/synchronised"},{"inline":true,"label":"discoverable","permalink":"/blog/tags/discoverable"}],"readingTime":2.54,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"discoverable","title":"Passkeyme supports Discoverable Credentials!!","tags":["introduction","passkeyme","saas","resident key","synchronised","discoverable"]},"unlisted":false,"prevItem":{"title":"Introducing PasskeyMe's New JavaScript and React SDKs - Firebase Auth for the Passkey Era","permalink":"/blog/new-javascript-react-sdks"},"nextItem":{"title":"Mmmmmmm, Dogfood!!","permalink":"/blog/dogfood"}},"content":"Passkeyme now supports Discoverable Credentials! This new feature takes user authentication to the next level, providing a more seamless and secure experience for your users. 🚀\n\n## What are Discoverable Credentials?\n\nDiscoverable Credentials, also known as Resident Keys, allow users to authenticate without needing to remember and enter their username. This is a significant improvement over non-discoverable credentials, where users must input their username every time they log in. With discoverable credentials, the authentication dialog will automatically display all available credentials for the user to choose from.\n\n### Non-Discoverable Credentials\n![Non-Discoverable Credentials](../static/img/passkeyme-nondiscoverable.png)\n\n### Discoverable Credentials\n![Discoverable Credentials](../static/img/passkeyme-discoverable.png)\n\n## Pros and Cons of Discoverable Credentials\n\n### Pros\n- **User Convenience:** Users don’t need to remember and type their usernames. They can simply select their credential from a list.\n- **Enhanced Security:** Reduces the risk of phishing attacks as users do not type their usernames, which could be intercepted by malicious actors.\n- **Improved User Experience:** Faster and easier authentication process.\n\n### Cons\n\nThere are normally some downsides to using discoverable credentials, however Passkeyme takes care of these for you! \n\nThis includes:\n- **Storage Requirements:** Discoverable credentials need to be stored securely on the device - but Passkeyme takes care of storage of the credential, securely, and anonymously!\n- **Complexity:** Implementing and managing discoverable credentials can add complexity to the authentication process - except if you use Passkeyme, and then its a breeze!\n\n- **Device Dependency:** If a user loses their device, they could lose access to their credentials unless they have a backup method - this is still true, however with Passkeyme:\n    - The user can still enter their username, and use non-discoverale mode and get access to their Passkey\n    - Fallback-flow is being built as we speak - watch this space!\n\n- **Comparatively worse UX:** Compared to non-discoverable, discoverable credentials require the user to select the correct passkey, which is an extra step. If it is possible to use non-discoverable credentials, this is recommended - i.e. if the username is cached on the device, or can be input buy the user\n\n## How to Enable Discoverable Credentials in Passkeyme\n\nActivating discoverable credentials in Passkeyme is simple. Follow these steps:\n\n### Step 1: Edit the Application\nNavigate to your application settings in the Passkeyme dashboard and click on \"Edit Application\".\n\n### Step 2: Set the \"Allow discoverable credentials\" Flag\nIn the application settings, set the \"Allow discoverable credentials\" flag to true.\n\n![Enable Discoverable Credentials](../static/img/paskeyme-discoverable-edit-application.png)\n\n### Step 3: Modify Your Authentication Requests\nWhen sending authentication requests, ensure that you do not include a username in your POST requests to `/start_authentication` and `/end_authentication`.\n\nNote, even with Discoverable enabled, you can still trigger a non-discoverable (which is less prone to device-specific operability issues) by specifying the username. If the username is known - i.e. if its a device that has previously logged in with the passkey and you have stored the username locally, we reccommend to use non-discoverable credentials so the user does not have to select their username from the Passkey dialog, which is cleaner.\n\n\n```json\nPOST /start_authentication\n{\n}\n```\n\n```json\nPOST /complete_authentication\n{\n    \"credential\": \"....\"\n}\n```"},{"id":"dogfood","metadata":{"permalink":"/blog/dogfood","source":"@site/blog/2024-06-16-dogfood.md","title":"Mmmmmmm, Dogfood!!","description":"Passkeyme.com supports Passkeys!","date":"2024-06-16T00:00:00.000Z","tags":[{"inline":true,"label":"introduction","permalink":"/blog/tags/introduction"},{"inline":true,"label":"passkeyme","permalink":"/blog/tags/passkeyme"},{"inline":true,"label":"saas","permalink":"/blog/tags/saas"},{"inline":true,"label":"dogfood","permalink":"/blog/tags/dogfood"}],"readingTime":3.21,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"dogfood","title":"Mmmmmmm, Dogfood!!","tags":["introduction","passkeyme","saas","dogfood"]},"unlisted":false,"prevItem":{"title":"Passkeyme supports Discoverable Credentials!!","permalink":"/blog/discoverable"},"nextItem":{"title":"Usage Charts","permalink":"/blog/usage-charts"}},"content":"## Passkeyme.com supports Passkeys!\n\nWell, it would be rude not to - you can now register a passkey for Passkeyme.com!\n\n![Passkeyme](../static/img/passskeyme-passkey-login2.png)\n\nI do have to take a bow - it was pretty straightforward to set up. The basic flow is as follows:\n\n1. User logs in as Normal\n2. Go to the Upper RHS Passkey menu item\n3. Follows the prompts to register their passkey\n4. Log out\n5. Select their username from the dropdown on the login screen\n6. Click Sign in with Passkey\n7. Done!\n\n### Implementation\n\nTo implement, I went through the following steps:\n\n1. Install the passkeyme-web-sdk via\n```\nnpm install passkeyme-web-sdk\n```\n\n\n2. Then added a RegisterPasskey component to my React frontend:\n```\nimport PasskeymeSDK from 'passkeyme-web-sdk';\nconst passkeymeSDK = new PasskeymeSDK();\n\n...\n\n      let challengeResponse = await axiosClient.post(`/api/auth/register-passkey`, {\n        username: thisuser.username,\n        displayname: thisuser.name\n      });\n\n      const passkeyResponse = await passkeymeSDK.passkeyRegister(challengeResponse.data.challenge);\n\n      let completeResponse = await axiosClient.post(`/api/auth/register-passkey/complete`, {\n        username: thisuser.username,\n        credential: passkeyResponse.credential\n      });\n```\n\n3. In the above, I added two new endpoints to my backend:\n```\n/auth/register-passkey\n/auth/register-passkey/complete\n```\n\nThese delegate to the passkeyme.com/webauthn/:appid/start_registration and complete_registration endpoints\n\n4. For Authentication, I added the following two endpoints to my backend:\n```\n/auth/authenticate-passkey\n/auth/authenticate-passkey/complete\n```\n\nWhich similarly delegate to the passkeyme.com/webauthn/:appid/start_authentication and complete_authentication endpoints\n\n5. Add the corresponding calls to my frontend login component:\n```\n      let challengeResponse = await axiosClient.post(`/api/auth/authenticate-passkey`, {\n        username\n      });\n\n      const passkeyResponse = await passkeymeSDK.passkeyAuthenticate(challengeResponse.data.challenge);\n\n      let completeResponse = await axiosClient.post(`/api/auth/authenticate-passkey/complete`, {\n        username,\n        credential: passkeyResponse.credential\n      });\n```\n\n5. Persist the array of usernames, and last used username in localStorage for convenience - you could also require the user to enter the username if that is more appropriate.\n\nThe Passkey form looks like (Its a React component using Chakra-UI):\n```\n      {passkeyUser && (\n        <>\n        <Box mb=\"6\">\n          <Select value={passkeyUser} onChange={(e) => setPasskeyUser(e.target.value)}>\n            {passkeymeUsers.map((user: string) => (\n              <option value={user} key={user}>{user}</option>\n            ))}\n            </Select>\n          <Button mt=\"6\" type=\"submit\" width=\"full\" colorScheme=\"brand\" onClick={() => doPasskeyAuthenticate(passkeyUser)}>\n            {translate(\"pages.login.passkey.button\", \"Sign in with Passkey\")}\n          </Button>\n        </Box>\n        <Divider></Divider>\n        </>\n      )}\n```\n\nNote it will only show the Passkey Box if there is a passkeyme username in localStorage, so if the user has not registered a Passkey, it won't be confusing.\n\n### Key Points\n\n* Note it supports multiple passkeys, you select the one you want to log in with from the dropdown. These are just maintained in the browser localStorage - its just the usernames, so its safe.\n\n* This actually does serve to showcase how you can implement passkeys with a simple workflow that yields an awesome user-experience!\nIt demonstrates a best practice for implementing passkeys, i.e:\n\n1. Register the passkey from an Authenticated user inside your app - your backend proxy to start/finish_registration should require an authenticated session\n2. User then just needs to specify their username to log in subsequently\n3. You can persist the username(s) on the device for convenience for the user.\n\n* Note also, the standard login serves as a Fallback. It is vital to always have a Fallback mechanism in case the user cannot access their Passkey - e.g. they have lost access to their iCloud, or lost the only device they use, etc.\n\nMore on the Fallback flow in future - this will be where I focus next, as it is important to get it right.\n\n### Conclusions\n\nThis was a simple, yet straightforward implementation using the Passkeyme passkeyme-web-sdk and API endpoints. It took a couple of hours to put together, yet it resulted in a quite elegant UX.\n\nIt does highlight that while Passkeys don't have to be complex to implement - your User eXperience is extremely important and needs careful attention - don't just shoehorn it in, spend time on the User Journey. Or if you can't - then follow the above blueprint!\n\nSo, what are you waiting for? You can add Passkeys to your app today!"},{"id":"usage-charts","metadata":{"permalink":"/blog/usage-charts","source":"@site/blog/2024-06-11-usage-charts.md","title":"Usage Charts","description":"Usage Charts added!","date":"2024-06-11T00:00:00.000Z","tags":[{"inline":true,"label":"introduction","permalink":"/blog/tags/introduction"},{"inline":true,"label":"passkeyme","permalink":"/blog/tags/passkeyme"},{"inline":true,"label":"saas","permalink":"/blog/tags/saas"},{"inline":true,"label":"analytics","permalink":"/blog/tags/analytics"},{"inline":true,"label":"charts","permalink":"/blog/tags/charts"},{"inline":true,"label":"usage","permalink":"/blog/tags/usage"}],"readingTime":0.35,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"usage-charts","title":"Usage Charts","tags":["introduction","passkeyme","saas","analytics","charts","usage"]},"unlisted":false,"prevItem":{"title":"Mmmmmmm, Dogfood!!","permalink":"/blog/dogfood"},"nextItem":{"title":"Why Passkeys Are Important and the Problems They Solve","permalink":"/blog/why-passkeys-are-important"}},"content":"## Usage Charts added!\n\nPasskeyme now includes usage reports - check out the Usage button from the Applications list/show pages!\n\nCharts are interactive, so you can select date ranges, and view usage at monthly points.\n\nOnce you have built up a few months of usage, these will prove to be useful - but don't worry if there's nothig in there when you're just getting set up! \n\n![Passkeyme](../static/img/passkeyme-usage-chart.png)"},{"id":"why-passkeys-are-important","metadata":{"permalink":"/blog/why-passkeys-are-important","source":"@site/blog/2024-06-09-why-passkeys-are-important.md","title":"Why Passkeys Are Important and the Problems They Solve","description":"Why Passkeys Are Important and the Problems They Solve","date":"2024-06-09T00:00:00.000Z","tags":[{"inline":true,"label":"passkeys","permalink":"/blog/tags/passkeys"},{"inline":true,"label":"security","permalink":"/blog/tags/security"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"}],"readingTime":2.72,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"why-passkeys-are-important","title":"Why Passkeys Are Important and the Problems They Solve","tags":["passkeys","security","authentication"]},"unlisted":false,"prevItem":{"title":"Usage Charts","permalink":"/blog/usage-charts"},"nextItem":{"title":"Introduction to Passkeyme","permalink":"/blog/introduction-to-passkeyme"}},"content":"## Why Passkeys Are Important and the Problems They Solve\n\n### Introduction\n\nIn today's digital age, security is a top priority for both users and developers. Traditional authentication methods, such as passwords, have been the cornerstone of online security for decades. However, they come with significant drawbacks. Passkeys, a modern alternative to passwords, offer a solution to many of these issues. In this blog post, we'll explore why passkeys are important and the problems they solve.\n\n### The Problem with Passwords\n\nPasswords have long been the go-to method for securing online accounts, but they have several inherent flaws:\n\n1. **Weak Passwords**: Many users choose simple, easily guessable passwords, making their accounts vulnerable to attacks.\n2. **Password Reuse**: Users often reuse passwords across multiple sites. If one site is compromised, all accounts using that password are at risk.\n3. **Phishing Attacks**: Phishing attacks trick users into revealing their passwords to malicious actors, leading to account breaches.\n4. **Credential Stuffing**: Automated attacks use stolen username-password pairs to gain unauthorized access to accounts.\n5. **Management Overhead**: Users need to remember numerous passwords, leading to poor password practices and a reliance on insecure storage methods.\n\n### Enter Passkeys\n\nPasskeys leverage public-key cryptography to provide a more secure and user-friendly authentication method. Here's how they work and the problems they solve:\n\n1. **Enhanced Security**:\n   - Passkeys use asymmetric cryptography, generating a unique public-private key pair for each service. The private key never leaves the user's device, while the public key is stored on the server.\n   - This method ensures that even if a server is compromised, the user's private key remains secure.\n\n2. **Phishing Resistance**:\n   - Passkeys are inherently resistant to phishing attacks. Since the private key never leaves the user's device, attackers cannot steal it through phishing attempts.\n\n3. **Elimination of Password Reuse**:\n   - Each service generates a unique key pair, eliminating the risk associated with password reuse. Compromising one service does not jeopardize others.\n\n4. **Simplified User Experience**:\n   - Passkeys simplify the login process. Users no longer need to remember complex passwords or use password managers. Authentication can be as simple as using a biometric scanner or entering a PIN.\n\n5. **Protection Against Credential Stuffing**:\n   - Passkeys render credential stuffing attacks ineffective. Since there are no shared passwords to exploit, attackers cannot use stolen credentials across multiple sites.\n\n### Implementing Passkeys with Passkeyme\n\nPasskeyme makes it easy for developers to integrate passkeys into their web and mobile applications. Our platform provides a robust REST API and cross-platform SDKs, allowing for seamless integration and enhanced security for your users.\n\n### Getting Started with Passkeyme\n\n1. **Integrate the API**: Use our REST API to handle the passkey registration and authentication processes securely.\n2. **Leverage SDKs**: Our SDKs for Web, iOS, and Android make it easy to implement passkey functionality across different platforms.\n3. **Enhance User Experience**: Provide your users with a streamlined, secure authentication method that improves their overall experience and reduces the risk of account breaches.\n\n### Conclusion\n\nPasskeys represent the future of online authentication, addressing many of the critical issues associated with traditional passwords. By leveraging public-key cryptography, passkeys offer enhanced security, resistance to phishing, and a simplified user experience. With Passkeyme, integrating passkeys into your applications has never been easier. Embrace the future of authentication and protect your users with Passkeyme."},{"id":"introduction-to-passkeyme","metadata":{"permalink":"/blog/introduction-to-passkeyme","source":"@site/blog/2024-06-08-introduction-to-passkeyme.md","title":"Introduction to Passkeyme","description":"What is Passkeyme?","date":"2024-06-08T00:00:00.000Z","tags":[{"inline":true,"label":"introduction","permalink":"/blog/tags/introduction"},{"inline":true,"label":"passkeyme","permalink":"/blog/tags/passkeyme"},{"inline":true,"label":"saas","permalink":"/blog/tags/saas"}],"readingTime":0.51,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"introduction-to-passkeyme","title":"Introduction to Passkeyme","tags":["introduction","passkeyme","saas"]},"unlisted":false,"prevItem":{"title":"Why Passkeys Are Important and the Problems They Solve","permalink":"/blog/why-passkeys-are-important"}},"content":"## What is Passkeyme?\n\nPasskeyme is a SaaS platform that allows developers to easily integrate passkeys into their web or mobile applications. It provides a secure and user-friendly authentication alternative to traditional passwords.\n\n### Why Use Passkeyme?\n\n- **Enhanced Security:** Passkeys leverage public-key cryptography, reducing the risk of phishing, credential stuffing, and other common attacks.\n- **User-Friendly:** Users no longer need to remember passwords, offering a better user experience.\n- **Easy Integration:** Passkeyme can be integrated into existing authentication frameworks, complementing traditional authentication methods.\n\n### Getting Started\n\nTo get started with Passkeyme, check out our [documentation](/docs).\n\n![Passkeyme](../static/img/passkeyme-logo-bgdark-removebg-preview.png)"}]}}